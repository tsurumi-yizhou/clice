import{_ as s,c as a,o as e,ae as l}from"./chunks/framework.U1Gow_7P.js";const c=JSON.parse('{"title":"Supported Platforms (CI Tested)","description":"","frontmatter":{},"headers":[],"relativePath":"build.md","filePath":"en/build.md"}'),t={name:"build.md"};function n(h,i,p,k,r,d){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="supported-platforms-ci-tested" tabindex="-1">Supported Platforms (CI Tested) <a class="header-anchor" href="#supported-platforms-ci-tested" aria-label="Permalink to &quot;Supported Platforms (CI Tested)&quot;">​</a></h1><ul><li>Windows</li><li>Linux</li><li>MacOS</li></ul><h1 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h1><ul><li>C++23-compatible compiler (currently only clang &gt;=19 supported)</li><li>libstdc++ &gt;= 14 (for linux)</li><li>CMake/Xmake</li><li><a href="https://github.com/marzer/tomlplusplus" target="_blank" rel="noreferrer">tomlplusplus</a></li><li><a href="https://github.com/libuv/libuv" target="_blank" rel="noreferrer">libuv</a></li><li><a href="https://github.com/llvm/llvm-project" target="_blank" rel="noreferrer">LLVM</a> &gt;= 20</li><li><a href="https://github.com/google/googletest" target="_blank" rel="noreferrer">googletest</a> (optional)</li></ul><h1 id="building" tabindex="-1">Building <a class="header-anchor" href="#building" aria-label="Permalink to &quot;Building&quot;">​</a></h1><h2 id="llvm" tabindex="-1">LLVM <a class="header-anchor" href="#llvm" aria-label="Permalink to &quot;LLVM&quot;">​</a></h2><p>We provide precompiled LLVM binaries for those who don&#39;t want to manually build LLVM. If you want to use your own version or debug LLVM, you can continue reading.</p><ul><li><p>If you have experience with xmake, you can directly use our script for building LLVM: <a href="https://github.com/clice-project/llvm-binary/blob/main/xmake.lua" target="_blank" rel="noreferrer">https://github.com/clice-project/llvm-binary/blob/main/xmake.lua</a></p></li><li><p>Manually build LLVM yourself.</p></li></ul><p>clice requires clang&#39;s private headers for compilation:</p><ul><li><code>clang/lib/Sema/CoroutineStmtBuilder.h</code></li><li><code>clang/lib/Sema/TypeLocBuilder.h</code></li><li><code>clang/lib/Sema/TreeTransform.h</code></li></ul><p>Copy these headers to either:</p><ul><li><code>&lt;clice_dir&gt;/include/clang/Sema</code></li><li><code>&lt;LLVM_INSTALL_PATH&gt;/include/clang/Sema</code></li></ul><p>We provide a script to download these headers to <code>&lt;clice_dir&gt;/include/clang/Sema</code> (require xmake).</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/fetch-clang-headers.lua</span></span></code></pre></div><h2 id="cmake" tabindex="-1">CMake <a class="header-anchor" href="#cmake" aria-label="Permalink to &quot;CMake&quot;">​</a></h2><p>We use CMake <code>find_package</code> in CONFIG mode for dependency resolution.</p><p>LLVM precompiled binaries must be installed at <code>-DLLVM_INSTALL_PATH=path/to/llvm</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .github/workflows/cmake.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Linux precompiled binary require glibc 2.31 (build on ubuntu 20.04)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./.llvm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/clice-project/llvm-binary/releases/download/20.0.0/x86_64-linux-gnu-release.tar.xz&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xJ</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./.llvm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MacOS precompiled binary require macos15+</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./.llvm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/clice-project/llvm-binary/releases/download/20.1.5/arm64-macosx-apple-release.tar.xz&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -xJ</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./.llvm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># windows precompiled binary only MD runtime support</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/clice-project/llvm-binary/releases/download/20.0.0/x64-windows-msvc-release.7z&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 7z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x64-windows-msvc-release.7z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-o.llvm&quot;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -B</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DCLICE_ENABLE_TEST=OFF</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DLLVM_INSTALL_PATH=.llvm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><p>The precompiled binary for MacOS is compiled by homebrew llvm@20.</p><p>Please use the same toolchain to build clice, DO NOT use Apple Clang.</p></div><h2 id="xmake" tabindex="-1">Xmake <a class="header-anchor" href="#xmake" aria-label="Permalink to &quot;Xmake&quot;">​</a></h2><p>When using Xmake, all dependencies will be automatically handled.</p><p>Xmake will find system packages using pkg-config or package managers (e.g., pacman, apt, ...).</p><p>If not found, Xmake falls back to downloading dependencies from GitHub, then building and installing them locally.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dev=y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable_test=n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --toolchain=clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span></span></code></pre></div><blockquote><p>The <code>dev</code> option will build dependencies using Ninja and set the runtime library to MD (Windows only).</p></blockquote><h1 id="for-developer" tabindex="-1">For developer <a class="header-anchor" href="#for-developer" aria-label="Permalink to &quot;For developer&quot;">​</a></h1><h2 id="cmake-1" tabindex="-1">cmake <a class="header-anchor" href="#cmake-1" aria-label="Permalink to &quot;cmake&quot;">​</a></h2><p>Recommended workflow using CMakePresets (require <a href="https://github.com/ninja-build/ninja" target="_blank" rel="noreferrer">ninja</a>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --preset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --preset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> release</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./build/bin/unit_tests</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test-dir=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tests&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --resource-dir=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./.llvm/lib/clang/20&quot;</span></span></code></pre></div><p>If your system does not have the clang-20 toolchain, please modify <code>cmake/toolchain.cmake</code> to specify the clang version.</p><h2 id="xmake-1" tabindex="-1">xmake <a class="header-anchor" href="#xmake-1" aria-label="Permalink to &quot;xmake&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --toolchain=clang</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><p>If your system does not have the clang-20 toolchain, please pass <code>--toolchain=clang-19</code> to specify the clang version.</p>`,34)]))}const F=s(t,[["render",n]]);export{c as __pageData,F as default};
