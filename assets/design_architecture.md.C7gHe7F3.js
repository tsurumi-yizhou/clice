import{_ as a,c as t,o as i,ae as r}from"./chunks/framework.U1Gow_7P.js";const p=JSON.parse('{"title":"Design of clice","description":"","frontmatter":{},"headers":[],"relativePath":"design/architecture.md","filePath":"en/design/architecture.md"}'),o={name:"design/architecture.md"};function l(s,e,n,c,d,h){return i(),t("div",null,e[0]||(e[0]=[r('<h1 id="design-of-clice" tabindex="-1">Design of clice <a class="header-anchor" href="#design-of-clice" aria-label="Permalink to &quot;Design of clice&quot;">​</a></h1><h2 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Server&quot;">​</a></h2><p>clice is a language server, which is also a kind of server. It uses <a href="https://github.com/libuv/libuv" target="_blank" rel="noreferrer">libuv</a> as the event library and follows the common event-driven model. The main thread handles requests and distributes tasks, while the thread pool executes the actual tasks. Related code is located in the <code>Server</code> directory. It generally is responsible for the following tasks:</p><ul><li>communicate with the client</li><li>initialize the server</li><li>distrubute tasks to the thread pool</li><li>manage all opened files</li></ul><h2 id="protocol" tabindex="-1">Protocol <a class="header-anchor" href="#protocol" aria-label="Permalink to &quot;Protocol&quot;">​</a></h2><p>describe the LSP <a href="https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/" target="_blank" rel="noreferrer">specification</a> with C++ struct definition.</p><h2 id="ast" tabindex="-1">AST <a class="header-anchor" href="#ast" aria-label="Permalink to &quot;AST&quot;">​</a></h2><p>The main focus is to encapsulate some compiler interfaces of Clang.</p><ul><li>build preamble</li><li>build AST</li><li>capture macros</li><li>capture diagnostics</li><li>resolve template</li><li>implement <code>SelectionTree</code></li></ul><p>TODO: add more details</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><p>mainly about how to build index and how to use it.</p><p>TODO: add more details</p><h2 id="feature" tabindex="-1">Feature <a class="header-anchor" href="#feature" aria-label="Permalink to &quot;Feature&quot;">​</a></h2><p>specific LSP feature implementations.</p><h2 id="support" tabindex="-1">Support <a class="header-anchor" href="#support" aria-label="Permalink to &quot;Support&quot;">​</a></h2><p>some useful utilities.</p>',17)]))}const f=a(o,[["render",l]]);export{p as __pageData,f as default};
